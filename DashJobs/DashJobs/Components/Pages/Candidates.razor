@page "/candidates"
@rendermode InteractiveServer
@using DashJobs.Repository.Constants
@using DashJobs.Services.Candidates
@using DashJobs.Services.Exceptions
@using DashJobs.Services.Users
@using Dashclass.Constants
@using Dashclass.Model
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager;


<PageTitle>Candidates</PageTitle>

@if (IsLoading)
{
    <h1>Loading...</h1>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Senioridade</th>
                <th>ID - VAGA</th>
                <th>Especialidade</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var candate in candidates)
            {
                <tr>
                    <td>@candate.Name</td>
                    <td>@candate.Seniority</td>
                    <td>@candate.VacancyId</td>
                    <td>@candate.Specialty</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    public ICandidatesService _candidatesService { get; set; }

    [Inject]
    public IUserService IUserService { get; set; }

    public IEnumerable<Candidate> candidates { get; set; } = new List<Candidate>();

    public bool IsLoading = true;
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var sessionResult = await ProtectedSessionStore.GetAsync<string>(Storage.SESSION);
                var session = sessionResult.Success ? sessionResult.Value : "";
                var isAuthenticated = await IUserService.IsAuthenticated(session, [Roles.ADMINISTRATIVE]);

                if (isAuthenticated)
                {
                    candidates = await _candidatesService.GetCandidates();
                }
            }
            catch (UnauthenticatedException)
            {
                NavigationManager.NavigateTo("/login");
            }
            catch (UnauthorizedException ex)
            {
                throw ex;
            }
            finally
            {
                IsLoading = false;
                isInitialized = true;
                StateHasChanged();
            }
        }
    }

}
